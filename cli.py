#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""数据文件读取、解析与过滤等."""

import json
import os
import re
from datetime import datetime

import click
from tqdm import tqdm

DEFAULT_DATA_PATH = 'data.json'


def now_datetime_str():
    """当前时间的字符串表示, 例如: 20190101010101."""
    return datetime.strftime(datetime.now(), '%Y%m%d%H%M%S')


def check_is_valid_hash(hash_):
    """检查指定 hash_ 是否为有效哈希."""
    hash_pattern = r'((?<!FIRSTBYTES:\s)|[\b\s]|^)([0-9a-fA-F]{32}|[0-9a-fA-F]{40}|[0-9a-fA-F]{64}|[0-9a-fA-F]{128})(\b|$)'
    return re.match(pattern=hash_pattern, string=hash_) is not None


def read_json(f_path):
    """读取保存数据的 json 文件."""
    f_path = os.path.abspath(f_path)

    if not os.path.exists(f_path):
        raise Exception(f'指定的文件不存在: {f_path}')
    if not f_path.endswith('.json'):
        raise Exception(f'指定的文件不以 .json 结尾: {f_path}')

    try:

        with open(f_path, encoding='utf-8') as f:
            j = json.loads(f.read())
            topic_list = j['topic_list'] if 'topic_list' in j else []
            info_list = j['info_list'] if 'info_list' in j else []
            return topic_list, info_list

    except Exception as e:
        tqdm.write(f'读取文件异常, 文件路径: {f_path}, 异常原因: {e.args}')
        return [], []


def filter_info_columns(info_list, col_raw):
    """根据提供的 col_raw 修改 info_list 内容."""
    # 先把不需要输出的一些属性去掉
    for del_col in ['topic_list']:
        [info.pop(del_col) for info in info_list if del_col in info]

    # 未指定 col, 原样返回
    if not col_raw:
        return info_list

    # col 转换
    col_raw = col_raw.strip(',')
    if ',' in col_raw:
        col_list = list(set(col_raw.split(',')))
    else:
        col_list = [col_raw]

    # col 验证
    col_list_all = ['time', 'title', 'link', 'hash', 'sha256']
    if not all(col in col_list_all for col in col_list):
        raise Exception(f'无效的参数: --col {col_raw}')
    if len(col_list) == len(col_list_all):
        raise Exception(f'无效的参数: --col {col_raw}')
    if 'hash' in col_list and 'sha256' in col_list:
        tqdm.write(f'hash / sha256 只能指定1个, 此处选择 sha256')
        col_list.remove('hash')

    info_list_ex = []

    # 遍历
    for info in info_list:

        info_ex = {}

        # 原封不动的
        for col in ['time', 'title', 'link']:
            if col in col_list:
                info_ex[col] = info[col]

        # 要改一下的
        if 'hash' in col_list:
            info_ex['hash_list'] = []
            if info['pending']:
                info_ex['hash_list'].extend(info['pending'])
            if info['confirmed']:
                for i_c in info['confirmed']:
                    info_ex['hash_list'].extend([i_c['md5'], i_c['sha1'], i_c['sha256']])
        elif 'sha256' in col_list:
            info_ex['hash_list'] = []
            if info['pending']:
                info_ex['hash_list'].extend(info['pending'])
            if info['confirmed']:
                for i_c in info['confirmed']:
                    info_ex['hash_list'].append(i_c['sha256'])

        # 添加到列表
        info_list_ex.append(info_ex)

    return info_list_ex


def info_list_to_str(info_list, is_json):
    """
    将 info_list 转为字符串.

    - 如果 info 只有1个 hash_list, 就不按 info 来分了, 都合并到一起
    """
    assert info_list
    if 'hash_list' in info_list[0] and len(info_list[0]) == 1:

        # 只输出 hash(去重)
        hash_set = set()
        [hash_set.update(info['hash_list']) for info in info_list]

        if is_json:
            return json.dumps(list(hash_set), ensure_ascii=False, indent=4)
        else:
            return '\n'.join(hash_set)
    else:
        # 不止输出 hash
        if is_json:
            return json.dumps(info_list, ensure_ascii=False, indent=4)
        else:

            lines = []

            for info in info_list:

                # 非 hash(必然有1个)
                assert any(x in info for x in ['time', 'title', 'link'])
                lines.append('-' * 30)
                for col in ['time', 'title', 'link']:
                    if col in info:
                        lines.append(info[col])

                # hash
                if 'hash_list' in info:
                    lines.append('hash:')
                    for h in info['hash_list']:
                        lines.append(f'    {h}')
                else:
                    if 'pending' in info and info['pending']:
                        lines.append('pending:')
                        for h in info['pending']:
                            lines.append(f'    {h}')
                    if 'confirmed' in info and info['confirmed']:
                        lines.append('confirmed:')
                        for h in info['confirmed']:
                            lines.append(f'    {h["md5"]}')
                            lines.append(f'    {h["sha1"]}')
                            lines.append(f'    {h["sha256"]}')

            return '\n'.join(lines)


def cbk_search(cbk_check_equal, out, col, is_json):
    """遍历信息列表, 查找符合条件的条目(回调中判断), (根据参数)导出结果或打印到控制台."""
    _, hash_list = read_json(DEFAULT_DATA_PATH)
    if hash_list:

        tqdm.write(f'待搜索个数: {len(hash_list)}')
        info_list = []

        # 遍历搜索
        # 简单形式不能用 tqdm: info_list = [info for info in hash_list if cbk_check_equal(info)]
        for info in tqdm(hash_list):
            if cbk_check_equal(info):
                info_list.append(info)

        # 判定结果
        if info_list:

            tqdm.write(f'搜索结果: {len(info_list)}')

            # 列过滤
            info_list = filter_info_columns(info_list, col)
            # 转字符串
            s = info_list_to_str(info_list, is_json)

            #
            if out:

                # 组合导出文件名
                f_out = os.path.join(out, f'{now_datetime_str()}_hash_output')
                if is_json:
                    f_out += '.json'
                else:
                    f_out += '.txt'
                try:
                    # 导出
                    with open(f_out, mode='w+', encoding='utf-8') as f:
                        f.write(s)
                        tqdm.write(f'结果导出至文件: {f_out}')
                except Exception as e:
                    tqdm.write(f'结果导出异常, 文件: {f_out}, 异常原因: {e.args}')
                    tqdm.write(f'将结果输出至控制台:')
                    tqdm.write(s)
            else:
                # 打印
                tqdm.write(s)
        else:
            tqdm.write(f'未搜索到符合条件的结果')
    else:
        tqdm.write(f'读取到的信息列表为空')


# 命令行接口

_out_options = [
    click.option('--out', help='将搜索结果导出到指定目录(目录必须存在)(未指定则打印到控制台)'),
    click.option('--col', help='要导出/打印的列, 中间以逗号(,)分割. 不指定则导出/打印全部(可选:"time/title/link/hash/sha256)"'),
    click.option('--json', 'is_json', is_flag=True, default=False, show_default=False, help='是否以 json 格式导出/打印')
]


def add_options(options):
    def _add_options(func):
        for option in reversed(options):
            func = option(func)
        return func

    return _add_options


@click.group()
def cli():
    pass


@cli.command(name='info')
def pt_info():
    """打印信息."""
    topic_list, hash_list = read_json(DEFAULT_DATA_PATH)
    if topic_list:
        tqdm.write(f'topic 个数: {len(topic_list)}')
        tqdm.write(f'前100个 topic: {topic_list[:100]} ...')  # 只打印前100个
    else:
        tqdm.write(f'无 topic 列表')
    if hash_list:

        tqdm.write(f'个数: {len(hash_list)}')

        # pending
        pending_set = set()
        [pending_set.update(info['pending']) for info in hash_list if info['pending']]
        tqdm.write(f'pending-hash 个数: {len(pending_set)}')

        # confirmed
        confirmed_sha256_set = set()
        [confirmed_sha256_set.update([ic['sha256'] for ic in info['confirmed'] if info['confirmed']]) for info in hash_list]
        tqdm.write(f'confirmed-sha256 个数: {len(confirmed_sha256_set)}')

    else:
        tqdm.write(f'无信息列表')


@click.group()
def search():
    """-> 搜索."""
    pass


@search.command(name='hash')
@click.option('-h', '--hash', 'hash_', required=True, help='要搜索的完整哈希值')
@add_options(_out_options)
def search_hash(hash_, out, col, is_json):
    """搜索哈希值."""
    if not check_is_valid_hash(hash_):
        raise Exception(f'输入的哈希无效: {hash_}')

    hash_ = hash_.lower()
    tqdm.write(f'要搜索的哈希值: {hash_}')

    def cbk_is_hash_match(info):
        """."""
        if info['pending'] and hash_ in info['pending']:
            return True
        if info['confirmed'] and any(hash_ in [ic['md5'], ic['sha1'], ic['sha256']] for ic in info['confirmed']):
            return True

        return False

    cbk_search(cbk_is_hash_match, out, col, is_json)


@search.command(name='word')
@click.option('-w', '--word', required=True, help='要搜索的词(默认只搜索标题)')
@click.option('--content', 'include_content', is_flag=True, default=False, show_default=True, help='是否搜索内容')
@add_options(_out_options)
def search_word(word, include_content, out, col, is_json):
    """搜索文章关键词(默认只有title, 如果需要搜索content则指定 --content)."""
    word = word.lower()
    tqdm.write(f'要搜索的词: {word}')

    def cbk_is_word_match(info):
        """."""
        return word in info['title'].lower() or (include_content and info['topic_list'] and word in info['topic_list'])

    cbk_search(cbk_is_word_match, out, col, is_json)


@search.command(name='file')
@click.option('-f', '--file', 'file_', required=True, help='包含有效哈希的文本文件(每行为1个哈希)')
@add_options(_out_options)
def search_file(file_, out, col, is_json):
    """从指定文件中读取哈希值, 并搜索."""
    if not os.path.exists(file_):
        raise Exception(f'指定文件不存在: {file_}')
    file_ = os.path.abspath(file_)
    tqdm.write(f'文件路径: {file_}')

    # 读取文件
    lines = []
    try:
        with open(file_, encoding='utf-8') as f:

            lines = f.readlines()
            tqdm.write(f'原文件行数: {len(lines)}')

            lines = [l.strip() for l in lines if l and l.strip() and check_is_valid_hash(l.strip())]
            if not lines:
                raise Exception(f'过滤后一行都没有了!')
            else:
                tqdm.write(f'过滤后剩余行数: {len(lines)}')

    except Exception as e:
        raise Exception(f'读取指定的文本文件异常, 文件: {file_}, 异常原因: {e.args}')

    # 去掉重复项
    assert lines
    h_set = set([l.lower() for l in lines])
    assert h_set
    tqdm.write(f'过滤后剩余有效哈希数: {len(h_set)}')

    # 匹配
    def cbk_is_hash_match(info):
        """."""
        if info['pending'] and h_set.intersection(info['pending']):
            return True
        if info['confirmed'] and any(h_set.intersection([ic['md5'], ic['sha1'], ic['sha256']]) for ic in info['confirmed']):
            return True

        return False

    cbk_search(cbk_is_hash_match, out, col, is_json)


@search.command(name='url')
@click.option('-u', '--url', required=True, help='要搜索的url片段')
@add_options(_out_options)
def search_url(url, out, col, is_json):
    """搜索文章链接."""
    url = url.lower()
    tqdm.write(f'要搜索的链接: {url}')

    def cbk_is_url_match(info):
        """."""
        return url in info['link'].lower()

    cbk_search(cbk_is_url_match, out, col, is_json)


# @cli.command(name='diff')
# def diff_json():
#     """与指定 json 比较."""
#     # TODO
#     pass


cli.add_command(search)

# main


if __name__ == '__main__':
    cli()
